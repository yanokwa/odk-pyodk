{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyODK","text":"<p>An API client for the ODK Central API. Use it to interact with your data and automate common tasks from Python.</p> <p>This library aims to make common data analysis and workflow automation tasks as simple as possible by providing clear method names, types, and examples. It also provides convenient access to the full API using HTTP verb methods.</p>"},{"location":"#install","title":"Install","text":"<p>The currently supported Python version for <code>pyodk</code> is 3.8.</p>"},{"location":"#from-pip","title":"From pip","text":"<pre><code>pip install pyodk\n</code></pre>"},{"location":"#from-source","title":"From source","text":"<pre><code># Get a copy of the repository.\nmkdir -P ~/repos/pyodk\ncd ~/repos/pyodk\ngit clone https://github.com/getodk/pyodk.git repo\n\n# Create and activate a virtual environment for the install.\n/usr/local/bin/python3.8 -m venv venv\nsource venv/bin/activate\n\n# Install pyodk and its production dependencies.\ncd ~/repos/pyodk/repo\npip install -e .\n\n# Leave the virtualenv.\ndeactivate\n</code></pre>"},{"location":"#configure","title":"Configure","text":"<p>The configuration file uses the TOML format. The default file name is <code>.pyodk_config.toml</code>, and the default location is the user home directory. The file name and location can be customised by setting the environment variable <code>PYODK_CONFIG_FILE</code> to some other file path, or by passing the path at init with <code>Client(config_path=\"my_config.toml\")</code>. The expected file structure is as follows:</p> <pre><code>[central]\nbase_url = \"https://www.example.com\"\nusername = \"my_user\"\npassword = \"my_password\"\ndefault_project_id = 123\n</code></pre>"},{"location":"#custom-configuration-file-paths","title":"Custom configuration file paths","text":"<p>The <code>Client</code> is specific to a configuration and cache file. These approximately correspond to the session which the <code>Client</code> represents; it also encourages segregating credentials. These paths can be set by:</p> <ul> <li>Setting environment variables <code>PYODK_CONFIG_FILE</code> and <code>PYODK_CACHE_FILE</code></li> <li>Init arguments: <code>Client(config_path=\"my_config.toml\", cache_path=\"my_cache.toml\")</code>.</li> </ul>"},{"location":"#default-project","title":"Default project","text":"<p>The <code>Client</code> is not specific to a project, but a default <code>project_id</code> can be set by:</p> <ul> <li>A <code>default_project_id</code> in the configuration file.</li> <li>An init argument: <code>Client(project_id=1)</code>.</li> <li>A property on the client: <code>client.project_id = 1</code>.</li> </ul>"},{"location":"#session-cache-file","title":"Session cache file","text":"<p>The session cache file uses the TOML format. The default file name is <code>.pyodk_cache.toml</code>, and the default location is the user home directory. The file name and location can be customised by setting the environment variable <code>PYODK_CACHE_FILE</code> to some other file path, or by passing the path at init with <code>Client(config_path=\"my_cache.toml\")</code>. This file should not be pre-created as it is used to store a session token after login.</p>"},{"location":"#use","title":"Use","text":"<p>To get started with <code>pyODK</code>, build a <code>Client</code>:</p> <pre><code>from pyodk.client import Client\nclient = Client()\n</code></pre> <p>Authentication is triggered by the first API call on the <code>Client</code>, or by explicitly using <code>Client.open()</code>.</p> <p>Use <code>Client.close()</code> to clean up a client session. Clean up is recommended for long-running scripts, e.g. web apps, etc.</p> <p>You can also use the Client as a context manager to manage authentication and clean up:</p> <pre><code>with Client() as client:\nprint(client.projects.list())\n</code></pre> <p>Learn more in the documentation.</p>"},{"location":"#examples","title":"Examples","text":"<p>\ud83d\udc49 See detailed tutorials in the documentation.</p> <pre><code>from pyodk.client import Client\nclient = Client()\nprojects = client.projects.list()\nforms = client.forms.list()\nsubmissions = client.submissions.list(form_id=next(forms).xmlFormId)\nform_data = client.submissions.get_table(form_id=\"birds\", project_id=8)\ncomments = client.submissions.list_comments(form_id=next(forms).xmlFormId, instance_id=\"uuid:...\")\nclient.forms.update(\nform_id=\"my_xlsform\",\ndefinition=\"my_xlsform.xlsx\",\nattachments=[\"fruits.csv\", \"vegetables.png\"],\n)\nclient.close()\n</code></pre>"},{"location":"#session-customization","title":"Session customization","text":"<p>If Session behaviour needs to be customised, for example to set alternative timeouts or retry strategies, etc., then subclass the <code>pyodk.session.Session</code> and provide an instance to the <code>Client</code> constructor, e.g. <code>Client(session=my_session)</code>.</p>"},{"location":"#logging","title":"Logging","text":"<p>Errors raised by pyODK and other messages are logged using the <code>logging</code> standard library. The logger is in the <code>pyodk</code> namespace / hierarchy (e.g <code>pyodk.config</code>, <code>pyodk.endpoints.auth</code>, etc.). The logs can be manipulated from your script / app as follows.</p> <pre><code>import logging\n# Initialise an example basic logging config (writes to stdout/stderr).\nlogging.basicConfig()\nlogging.getLogger().setLevel(logging.DEBUG)\n# Get a reference to the pyodk logger.\npyodk_log = logging.getLogger(\"pyodk\")\n# Receive everything DEBUG level and higher.\npyodk_log.setLevel(logging.DEBUG)\npyodk_log.propagate = True\n# Ignore everything below FATAL level.\npyodk_log.setLevel(logging.FATAL)\npyodk_log.propagate = False\n</code></pre>"},{"location":"#errors-raised-by-pyodk","title":"Errors raised by pyODK","text":"<p>Error types raised by pyODK are found in <code>errors.py</code>, which currently is only the <code>PyODKError</code>. In general this error is raised when:</p> <ul> <li>The pyODK configuration is invalid (missing file, missing fields, etc).</li> <li>The client method arguments are invalid (missing, wrong type, etc.).</li> <li>The response from ODK Central indicated and error (HTTP &gt;=400, &lt;600).</li> <li>The data returned from ODK Central does not have the expected fields or types.</li> </ul> <p>Note that pyODK does not attempt to wrap every possible error condition, so if needed, broader exception handling should be included in your script / app.</p>"},{"location":"#contribute","title":"Contribute","text":"<p>See issues for additions to <code>pyodk</code> that are under consideration. Please file new issues for any functionality you are missing.</p>"},{"location":"#develop","title":"Develop","text":"<p>Install the source files as described above, then:</p> <pre><code>pip install -r dev_requirements.pip\n</code></pre> <p>You can run tests with:</p> <pre><code>nosetests\n</code></pre> <p>On Windows, use:</p> <pre><code>nosetests -v -v --traverse-namespace ./tests\n</code></pre>"},{"location":"#release","title":"Release","text":"<ol> <li>Run all linting and tests.</li> <li>Draft a new GitHub release with the list of merged PRs.</li> <li>Check out a release branch from latest upstream master.</li> <li>Update <code>pyodk/__version__.py</code> with the new release version number.</li> <li>Commit, push the branch, and initiate a pull request. Wait for tests to pass, then merge the PR.</li> <li>Tag the release and it will automatically be published (see <code>release.yml</code> actions file).</li> </ol>"},{"location":"client/","title":"Client","text":"<p>A connection to a specific ODK Central server. Manages authentication and provides access to Central functionality through methods organized by the Central resource they are most related to.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Optional[str]</code> <p>Where to read the pyodk_config.toml. Defaults to the path in PYODK_CONFIG_FILE, then the user home directory.</p> <code>None</code> <code>cache_path</code> <code>Optional[str]</code> <p>Where to read/write pyodk_cache.toml. Defaults to the path in PYODK_CACHE_FILE, then the user home directory.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The project ID to use for all client calls. Defaults to the \"default_project_id\" in pyodk_config.toml, or can be specified per call.</p> <code>None</code> <code>session</code> <code>Optional[Session]</code> <p>A prepared pyodk.session.Session class instance, or an instance of a customised subclass.</p> <code>None</code> <code>api_version</code> <code>Optional[str]</code> <p>The ODK Central API version, which is used in the URL path e.g. 'v1' in 'https://www.example.com/v1/projects'.</p> <code>'v1'</code>"},{"location":"client/#pyodk.client.Client.close","title":"<code>close(*args)</code>","text":"<p>Close the session.</p>"},{"location":"client/#pyodk.client.Client.open","title":"<code>open()</code>","text":"<p>Enter the session, and authenticate.</p>"},{"location":"forms/","title":"Forms","text":"<p>Form-related functionality is accessed through <code>client.forms</code>. For example:</p> <pre><code>from pyodk.client import Client\nclient = Client()\nforms = client.forms.list()\n</code></pre>"},{"location":"forms/#pyodk._endpoints.forms.FormService.get","title":"<code>get(form_id, project_id=None)</code>","text":"<p>Read Form details.</p> <p>Parameters:</p> Name Type Description Default <code>form_id</code> <code>str</code> <p>The id of this form as given in its XForms XML definition.</p> required <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Form</code> <p>An object representation of the Form's metadata.</p>"},{"location":"forms/#pyodk._endpoints.forms.FormService.list","title":"<code>list(project_id=None)</code>","text":"<p>Read all Form details.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>Optional[int]</code> <p>The id of the project the forms belong to.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Form]</code> <p>A list of object representations of all Forms' metadata.</p>"},{"location":"forms/#pyodk._endpoints.forms.FormService.update","title":"<code>update(form_id, project_id=None, definition=None, attachments=None, version_updater=None)</code>","text":"<p>Update an existing Form. Must specify definition, attachments or both.</p> <p>Accepted call patterns:</p> <ul> <li>form definition only</li> <li>form definition with attachments</li> <li>form attachments only</li> <li>form attachments with <code>version_updater</code></li> </ul> <p>If a definition is provided, the new version name must be specified in the definition. If no definition is provided, a default version will be set using the current datetime is ISO format.</p> <p>The default datetime version can be overridden by providing a <code>version_updater</code> function. The function will be passed the current version name as a string, and must return a string with the new version name. For example:</p> <ul> <li>Parse then increment a version number: <code>version_updater=lambda v: int(v) + 1</code></li> <li>Disregard the input and return a string: <code>version_updater=lambda v: \"v2.0\"</code>.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>form_id</code> <code>str</code> <p>The xmlFormId of the Form being referenced.</p> required <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <code>definition</code> <code>Optional[str]</code> <p>The path to a form definition file to upload. The form definition must include an updated version string.</p> <code>None</code> <code>attachments</code> <code>Optional[Iterable[str]]</code> <p>The paths of the form attachment file(s) to upload.</p> <code>None</code> <code>version_updater</code> <code>Optional[Callable[[str], str]]</code> <p>A function that accepts a version name string and returns a version name string, which is used for the new form version. Not allowed if a form definition is specified.</p> <code>None</code>"},{"location":"http-methods/","title":"HTTP verb methods","text":"<p>For interacting with parts of the ODK Central API (docs) that have not been implemented in <code>pyodk</code>, use HTTP verb methods exposed on the <code>Client</code>:</p> <pre><code>client.get(\"projects/8\")\nclient.post(\"projects/7/app-users\", json={\"displayName\": \"Lab Tech\"})\n</code></pre> <p>These methods provide convenient access to <code>Client.session</code>, which is a <code>requests.Session</code> object subclass. The <code>Session</code> has customised to prefix request URLs with the <code>base_url</code> from the pyodk config. For example with a base_url <code>https://www.example.com</code>, a call to <code>client.session.get(\"projects/8\")</code> gets the details of <code>project_id=8</code>, using the full url <code>https://www.example.com/v1/projects/8</code>.</p> <p>Learn more in this example.</p>"},{"location":"projects/","title":"Projects","text":"<p>Project-related functionality is accessed through <code>client.projects</code>. For example:</p> <pre><code>from pyodk.client import Client\nclient = Client()\nprojects = client.projects.list()\n</code></pre>"},{"location":"projects/#pyodk._endpoints.projects.ProjectService.create_app_users","title":"<code>create_app_users(display_names, forms=None, project_id=None)</code>","text":"<p>Create new project app users and optionally assign forms to them.</p> <p>Parameters:</p> Name Type Description Default <code>display_names</code> <code>Iterable[str]</code> <p>The friendly nicknames of the app users to be created.</p> required <code>forms</code> <code>Optional[Iterable[str]]</code> <p>The xmlFormIds of the forms to assign the app users to.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code>"},{"location":"projects/#pyodk._endpoints.projects.ProjectService.get","title":"<code>get(project_id=None)</code>","text":"<p>Read all Project details.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>Optional[int]</code> <p>The id of the project to read.</p> <code>None</code> <p>Returns:</p> Type Description <code>Project</code> <p>An object representation of the Project's metadata.</p>"},{"location":"projects/#pyodk._endpoints.projects.ProjectService.list","title":"<code>list()</code>","text":"<p>Read Project details.</p> <p>Returns:</p> Type Description <code>List[Project]</code> <p>An list of object representations of the Projects' metadata.</p>"},{"location":"submissions/","title":"Submissions","text":"<p>Submission-related functionality is accessed through <code>client.submissions</code>. For example:</p> <pre><code>from pyodk.client import Client\nclient = Client()\ndata = client.submissions.get_table(form_id=\"my-form\")[\"value\"]\n</code></pre>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.add_comment","title":"<code>add_comment(instance_id, comment, project_id=None, form_id=None)</code>","text":"<p>Create a Comment.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>The instanceId of the Submission being referenced.</p> required <code>comment</code> <code>str</code> <p>The text of the comment.</p> required <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <p>Returns:</p> Type Description <code>Comment</code> <p>An object representation of the newly-created Comment.</p>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.create","title":"<code>create(xml, form_id=None, project_id=None, device_id=None)</code>","text":"<p>Create a Submission.</p> <p>Example submission XML structure:</p> <pre><code>&lt;data id=\"my_form\" version=\"v1\"&gt;\n  &lt;meta&gt;\n    &lt;instanceID&gt;uuid:85cb9aff-005e-4edd-9739-dc9c1a829c44&lt;/instanceID&gt;\n  &lt;/meta&gt;\n  &lt;name&gt;Alice&lt;/name&gt;\n  &lt;age&gt;36&lt;/age&gt;\n&lt;/data&gt;\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>str</code> <p>The submission XML.</p> required <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <code>device_id</code> <code>Optional[str]</code> <p>An optional deviceID associated with the submission.</p> <code>None</code>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.edit","title":"<code>edit(instance_id, xml, form_id=None, project_id=None, comment=None)</code>","text":"<p>Edit a submission and optionally comment on it.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>The instanceId of the Submission being referenced.</p> required <code>xml</code> <code>str</code> <p>The submission XML.</p> required <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <code>comment</code> <code>Optional[str]</code> <p>The text of the comment.</p> <code>None</code>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.get","title":"<code>get(instance_id, form_id=None, project_id=None)</code>","text":"<p>Read Submission metadata.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>The instanceId of the Submission being referenced.</p> required <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Submission</code> <p>An object representation of the Submission's metadata.</p>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.get_table","title":"<code>get_table(form_id=None, project_id=None, table_name='Submissions', skip=None, top=None, count=None, wkt=None, filter=None, expand=None)</code>","text":"<p>Read Submission data.</p> <p>Parameters:</p> Name Type Description Default <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <code>table_name</code> <code>Optional[str]</code> <p>The name of the table to be returned.</p> <code>'Submissions'</code> <code>skip</code> <code>Optional[int]</code> <p>The first n rows will be omitted from the results.</p> <code>None</code> <code>top</code> <code>Optional[int]</code> <p>Only up to n rows will be returned in the results.</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>If True, an @odata.count property will be added to the result to indicate the total number of rows, ignoring the above paging parameters.</p> <code>None</code> <code>wkt</code> <code>Optional[bool]</code> <p>If True, geospatial data will be returned as Well-Known Text (WKT) strings rather than GeoJSON structures.</p> <code>None</code> <code>filter</code> <code>Optional[str]</code> <p>Filter responses to those matching the query. Only certain fields are available to reference (submitterId, createdAt, updatedAt, reviewState). The operators lt, le, eq, neq, ge, gt, not, and, and or are supported, and the built-in functions now, year, month, day, hour, minute, second.</p> <code>None</code> <code>expand</code> <code>Optional[str]</code> <p>Repetitions, which should get expanded. Currently, only <code>*</code> (star) is implemented, which expands all repetitions.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict</code> <p>A dictionary representation of the OData JSON document.</p>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.list","title":"<code>list(form_id=None, project_id=None)</code>","text":"<p>Read all Submission metadata.</p> <p>Parameters:</p> Name Type Description Default <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project the Submissions belong to.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Submission]</code> <p>A list of the object representation of all Submissions' metadata.</p>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.list_comments","title":"<code>list_comments(instance_id, form_id=None, project_id=None)</code>","text":"<p>Read all Comment details.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>The instanceId of the Submission being referenced.</p> required <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project the Submissions belong to.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Comment]</code> <p>A list of all Comments.</p>"},{"location":"submissions/#pyodk._endpoints.submissions.SubmissionService.review","title":"<code>review(instance_id, review_state, form_id=None, project_id=None, comment=None)</code>","text":"<p>Update Submission metadata and optionally comment on it.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>The instanceId of the Submission being referenced.</p> required <code>review_state</code> <code>str</code> <p>The current review state of the submission.</p> required <code>form_id</code> <code>Optional[str]</code> <p>The xmlFormId of the Form being referenced.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The id of the project this form belongs to.</p> <code>None</code> <code>comment</code> <code>Optional[str]</code> <p>The text of the comment.</p> <code>None</code>"},{"location":"examples/","title":"Examples","text":"<p>Examples of solutions to different types of problems.</p> <p>Please help us expand this resource! Contribute an example by opening a pull request. You can also share what you've done or what you'd like to see in an issue.</p>"},{"location":"examples/#using-pyodk-and-pandas-for-basic-analysis","title":"Using <code>pyodk</code> and <code>pandas</code> for basic analysis","text":"<p>A standalone Jupyter notebook intended to introduce <code>pyodk</code> and show how it can be used with <code>pandas</code> and <code>geopandas</code> to perform basic analysis. Shows building a client and fetching data for a form. You can try this on your server using this form definition.</p>"},{"location":"examples/#going-beyond-pyodks-library-methods","title":"Going beyond <code>pyodk</code>'s library methods","text":"<p>A standalone Jupyter notebook that shows how the raw HTTP method access and the API docs can be used together to make use of the full ODK Central API.</p>"},{"location":"examples/#working-with-repeats","title":"Working with repeats","text":"<p>A Jupyter notebook demonstrating some options for working with repeats.</p>"},{"location":"examples/#app-user-provisioning-script","title":"App User provisioning script","text":"<p>A script that reads names from a CSV and creates an App User for each one that isn't currently used by an active App User on the server. Also creates customized QR codes for each new App User.</p>"},{"location":"examples/#october-2022-webinar-materials","title":"October 2022 webinar materials","text":"<p>A Jupyter notebook companion to an October 2022 webinar by H\u00e9l\u00e8ne Martin introducing <code>pyodk</code>. Includes link to the session recording.</p>"},{"location":"examples/2022-10-pyodk-webinar/","title":"Automating data analysis and workflows with pyODK","text":"In\u00a0[1]: Copied! <pre>print(\"Hello, world!\")\n</pre> print(\"Hello, world!\") <pre>Hello, world!\n</pre> In\u00a0[42]: Copied! <pre>from pyodk.client import Client\n\nclient = Client()\nclient.open()\nclient.projects.list()\n</pre> from pyodk.client import Client  client = Client() client.open() client.projects.list() Out[42]: <pre>[Project(id=38, name='H\u00e9l\u00e8ne encrypted', createdAt=datetime.datetime(2021, 4, 26, 18, 36, 51, 785000, tzinfo=datetime.timezone.utc), description=None, archived=None, keyId=19, appUsers=None, forms=None, lastSubmission=None, updatedAt=datetime.datetime(2021, 4, 26, 18, 37, 13, 924000, tzinfo=datetime.timezone.utc), deletedAt=None),\n Project(id=4, name='Impact++', createdAt=datetime.datetime(2021, 1, 31, 21, 52, 30, 606000, tzinfo=datetime.timezone.utc), description=None, archived=None, keyId=None, appUsers=None, forms=None, lastSubmission=None, updatedAt=datetime.datetime(2022, 3, 9, 0, 55, 21, 658000, tzinfo=datetime.timezone.utc), deletedAt=None),\n Project(id=52, name='pyODK webinar', createdAt=datetime.datetime(2022, 10, 18, 16, 17, 33, 980000, tzinfo=datetime.timezone.utc), description='For Oct 19 session on pyODK.', archived=None, keyId=None, appUsers=None, forms=None, lastSubmission=None, updatedAt=datetime.datetime(2022, 10, 19, 4, 42, 1, 824000, tzinfo=datetime.timezone.utc), deletedAt=None)]</pre> <p>This looks a bit magical! We also wrote a <code>config.toml</code> file together and explicitly built a client using that configuration. We specified a cache path as well so that credentials for this configuration get saved separately from those for the client we created above.</p> <p>We can use multiple clients that connect to multiple servers or use different credentials on the same server in the same program.</p> In\u00a0[4]: Copied! <pre>viewer_client = Client(config_path=\"config.toml\", cache_path=\"cache.toml\")\nviewer_client.open()\nviewer_client.projects.list()\n</pre> viewer_client = Client(config_path=\"config.toml\", cache_path=\"cache.toml\") viewer_client.open() viewer_client.projects.list() Out[4]: <pre>[Project(id=52, name='pyODK webinar', createdAt=datetime.datetime(2022, 10, 18, 16, 17, 33, 980000, tzinfo=datetime.timezone.utc), description='For Oct 19 session on pyODK.', archived=None, keyId=None, appUsers=None, forms=None, lastSubmission=None, updatedAt=datetime.datetime(2022, 10, 19, 4, 42, 1, 824000, tzinfo=datetime.timezone.utc), deletedAt=None)]</pre> <p>We can list any type of resource. We get back a list of Python objects with appropriately-typed fields. These objects provide access to the resource metadata.</p> In\u00a0[5]: Copied! <pre>client.forms.list()\n</pre> client.forms.list() Out[5]: <pre>[Form(projectId=52, xmlFormId='foods', name='Favorite foods', version='2022102202', enketoId='DWTgFxdpHhMatjKjFPtAg7pRnvzwMnM', hash='3a0b4f0dc731adca7e6683b1081b8686', state='open', createdAt=datetime.datetime(2022, 10, 19, 5, 34, 26, 659000, tzinfo=datetime.timezone.utc), keyId=None, updatedAt=datetime.datetime(2022, 10, 19, 5, 45, 47, 999000, tzinfo=datetime.timezone.utc), publishedAt=datetime.datetime(2022, 10, 19, 5, 45, 47, 997000, tzinfo=datetime.timezone.utc)),\n Form(projectId=52, xmlFormId='participants', name='pyODK webinar participant survey', version='2022101802', enketoId='pfRYfxj0bOmGyCZnaZ0umsk0AsunD6N', hash='521961ede019cc24ceed078905506fea', state='open', createdAt=datetime.datetime(2022, 10, 19, 4, 39, 46, 62000, tzinfo=datetime.timezone.utc), keyId=None, updatedAt=datetime.datetime(2022, 10, 19, 4, 42, 1, 834000, tzinfo=datetime.timezone.utc), publishedAt=datetime.datetime(2022, 10, 19, 4, 40, 59, 355000, tzinfo=datetime.timezone.utc)),\n Form(projectId=52, xmlFormId='simple_repeat', name='simple_repeat', version='2022101001', enketoId='qlPrrhsIjqPdT5FnsLVDdh3nBFAszaW', hash='8bd777cb7b66660beafc034eee16b09b', state='open', createdAt=datetime.datetime(2022, 10, 18, 20, 49, 53, 997000, tzinfo=datetime.timezone.utc), keyId=None, updatedAt=datetime.datetime(2022, 10, 19, 4, 42, 1, 842000, tzinfo=datetime.timezone.utc), publishedAt=datetime.datetime(2022, 10, 18, 20, 49, 58, 484000, tzinfo=datetime.timezone.utc))]</pre> In\u00a0[\u00a0]: Copied! <pre># client.submissions.list(form_id='participants')\n</pre> # client.submissions.list(form_id='participants') <p>Listing submissions gives us a list of objects representing submission metadata. There's a lot we can do with that but typically what we really want is the submission content.</p> <p>We can get our submission data by using the <code>get_table</code> method. This will give us back our data as JSON in a top-level <code>value</code> key (for the OData standard). We could use this directly but it's even more convenient to get it into <code>pandas</code>, a Python library for data manipulation and analysis.</p> <p>Some good resources for learning about <code>pandas</code> and using Python for data analysis and manipulation are:</p> <ul> <li>The <code>pandas</code> Getting Started guide - great tutorials on focused topics</li> <li>Kaggle - well-structured longer tutorials with exercises to check your understanding</li> </ul> <p>There are also large numbers of courses through Udemy, EdX, etc, some of which provide certificates.</p> <p><code>pyodk</code> helps build a bridge into <code>pandas</code> directly from ODK Central so that we don't have to manage versioning of our dataset and can use Central as the ultimate source of truth. This is helpful for monitoring data as it comes in and should work smoothly for over a million indicators (submission count times field count). With large submission sets, we will be limited by our Internet connection and server RAM and CPU.</p> <p>Once we're in <code>pandas</code>, there's nothing special about ODK data! Note that we can also use all of these techniques on a CSV export from Central.</p> <p><code>get_table</code> has several parameters that can be passed into it to do things like filter the submissions we request. Use SHIFT+TAB as described above to see what they are.</p> In\u00a0[43]: Copied! <pre>json = client.submissions.get_table(form_id='participants')['value']\n\nimport pandas as pd\ndf = pd.json_normalize(json, sep='-')\ndf.head(3)\n</pre> json = client.submissions.get_table(form_id='participants')['value']  import pandas as pd df = pd.json_normalize(json, sep='-') df.head(3) Out[43]: __id note_welcome height_units height_feet height_meters height note_height_meters pets book liked-type ... __system-updatedAt __system-submitterId __system-submitterName __system-attachmentsPresent __system-attachmentsExpected __system-status __system-reviewState __system-deviceId __system-edits __system-formVersion 0 uuid:670fa9de-9191-4968-a08e-1aba8061d0e0 None ft 7.99 NaN 2.43 None n 3 Point ... None 711 Participant 0 0 None None None 0 2022101802 1 uuid:afe70664-6670-4ff1-8efc-a23eb0c6ec89 None ft 3.01 NaN 0.92 None y Mr Muscle Point ... None 711 Participant 0 0 None None None 0 2022101802 2 uuid:f75e9730-89d8-407d-ba2a-9990ce90233f None m NaN 1.89 1.89 None n Gamba Point ... None 711 Participant 0 0 None None None 0 2022101802 <p>3 rows \u00d7 24 columns</p> <p>Once our data is in <code>pandas</code>, we have access to powerful data cleaning and analysis tools.</p> <p>We looked at quick ways to make plots:</p> In\u00a0[55]: Copied! <pre>df.pets.value_counts().plot(kind='pie')\n</pre> df.pets.value_counts().plot(kind='pie') Out[55]: <pre>&lt;AxesSubplot:ylabel='pets'&gt;</pre> <p>We also plotted the pets column and noticed that it has the exact same shape! Are the two correlated?</p> In\u00a0[52]: Copied! <pre>df['height_code'] = df.height_units.astype('category').cat.codes\ndf['pets_code'] = df.pets.astype('category').cat.codes\ndf.pets_code.corr(df.height_code)\n</pre> df['height_code'] = df.height_units.astype('category').cat.codes df['pets_code'] = df.pets.astype('category').cat.codes df.pets_code.corr(df.height_code) Out[52]: <pre>-0.4035087719298247</pre> <p>No, that's a pretty weak correlation so it's really a coincidence that the number of people who prefer <code>meters</code> is the same as the number of people who don't have pets. Too bad, I had made up a whole story in my head about Americans and pets.</p> <p>Anyway, hopefully this illustrates that it's relatively quick and fun to explore data in this way.</p> <p><code>pandas</code> can also give us a really nice standard summary of numeric columns:</p> In\u00a0[15]: Copied! <pre>df.height.describe()\n</pre> df.height.describe() Out[15]: <pre>count    34.000000\nmean      1.747941\nstd       0.211914\nmin       0.920000\n25%       1.700000\n50%       1.760000\n75%       1.820000\nmax       2.430000\nName: height, dtype: float64</pre> <p>And we can do analysis on metadata as well as customize the plots:</p> In\u00a0[45]: Copied! <pre>df['__system-submitterName'].value_counts().plot(kind='bar', rot=45)\n</pre> df['__system-submitterName'].value_counts().plot(kind='bar', rot=45) Out[45]: <pre>&lt;AxesSubplot:&gt;</pre> <p>The examples above focus on analysis. We can also manipulate the data to clean it. For example, if we prefix all notes in our XLSForm with <code>note_</code>, we can remove them from the data table in a single step:</p> In\u00a0[58]: Copied! <pre>df = df.drop(df.filter(regex = 'note_'), axis = 1)\n</pre> df = df.drop(df.filter(regex = 'note_'), axis = 1)"},{"location":"examples/2022-10-pyodk-webinar/#Automating-data-analysis-and-workflows-with-pyODK","title":"Automating data analysis and workflows with pyODK\u00b6","text":"<p>by H\u00e9l\u00e8ne Martin on October 19th, 2022</p> <ul> <li>Slides</li> <li>Recording (demo starts here)</li> <li>Participants survey XLSForm</li> </ul> <p>Jupyter Lab is an interactive computing environment used in this session. This file is a Jupyter Notebook which can be opened and edited in many platforms including Jupyter Lab. Even Github knows how to show Jupyter Notebooks! When you first open a notebook or if you see it in a view-only platform like Github, the output shown is static, saved from the last run.</p> <p>If you have any questions or comments, please share them on the forum.</p> <p>Since many are new to Python and to Jupyter Lab, we started with Hello, world!</p>"},{"location":"examples/2022-10-pyodk-webinar/#Configuring-pyodk-and-calling-library-methods","title":"Configuring <code>pyodk</code> and calling library methods\u00b6","text":"<p>We looked at how to build a <code>pyodk</code> client and make our first request to the ODK Central backend. This client used H\u00e9l\u00e8ne's configuration in her home directory. The credentials she entered have access to three projects that we can list using the <code>pyodk</code> client's <code>list</code> method in the <code>projects</code> accessor. In <code>pyodk</code>, functionality is organized according to the resource (projects, forms, submissions) that they act on.</p> <p>If you create your own <code>.pyodk_config.toml</code> in your home directory and run the cell below, you will see the projects that your credentials have access to.</p>"},{"location":"examples/2022-10-pyodk-webinar/#Learning-more-about-available-functionality","title":"Learning more about available functionality\u00b6","text":"<p>We listed submissions as well. For these notes we've commented out the call with a <code>#</code> because there are a lot of submissions!</p> <p>To learn more about the functionality available for each resource type in Jupyter Lab (and most development environments), we can type the name of our client followed by the name of the resource, add a period and then use the tab key to see what is available. For example, to learn more about methods available for submissions, we would type <code>client.submissions.</code> and then a tab.</p> <p>We can also learn more about a specific method by typing its name (or selecting it from the suggestions given as above) and then typing SHIFT+TAB.</p>"},{"location":"examples/2022-10-pyodk-webinar/#Getting-submission-data-into-pandas","title":"Getting submission data into pandas\u00b6","text":""},{"location":"examples/2022-10-pyodk-webinar/#Analyzing-data-from-forms-with-repeats","title":"Analyzing data from forms with repeats\u00b6","text":"<p>We quickly went through an example of joining repeat data to the base form data. You can see the example worked in more detail here.</p>"},{"location":"examples/2022-10-pyodk-webinar/#Using-HTTP-verb-methods-to-make-direct-calls-to-the-API","title":"Using HTTP verb methods to make direct calls to the API\u00b6","text":"<p>Our goal is to make many common workflow automation tasks directly available in <code>pyodk</code> as nice library methods. We haven't implemented most of those yet, though. You can still access the full Central API with the convenience of a configured <code>pyodk</code> client by using HTTP verb methods on your <code>Client</code> object.</p> <p>We briefly looked at how to use the Central API docs to make the right calls. You can see a worked example here.</p> <p>There's also a longer sample script here that shows provisioning App Users from a file of names and generating custom QR codes for each of them.</p>"},{"location":"examples/basic-analysis-pandas/","title":"Basic analysis pandas","text":"In\u00a0[2]: Copied! <pre>from pyodk.client import Client\nimport pandas as pd\n</pre> from pyodk.client import Client import pandas as pd In\u00a0[4]: Copied! <pre>with Client() as client:\n    submissions = client.submissions.get_table(form_id='fav_color')\n    df = pd.json_normalize(data=submissions['value'], sep='/')\n    \ndf.head(3)\n</pre> with Client() as client:     submissions = client.submissions.get_table(form_id='fav_color')     df = pd.json_normalize(data=submissions['value'], sep='/')      df.head(3) Out[4]: __id first_name age favorite_color favorite_color_other location/type location/coordinates location/properties/accuracy meta/audit meta/instanceID ... __system/submitterId __system/submitterName __system/attachmentsPresent __system/attachmentsExpected __system/status __system/reviewState __system/deviceId __system/edits __system/formVersion location 0 uuid:7993ed66-5f17-432d-896c-fd9cbc76bf07 Tochakwa 37 o Blue Point [7.436423, 10.528851, 646.1000366210938] 16.204 None uuid:7993ed66-5f17-432d-896c-fd9cbc76bf07 ... 548 WHO 0 0 None rejected None 0 2022062100 NaN 1 uuid:f1b96b04-4cf8-4bdf-8eeb-b1f2893e2022 John Doe 50 g None Point [17.071151, -22.555347, 1711.5999755859375] 17.416 None uuid:f1b96b04-4cf8-4bdf-8eeb-b1f2893e2022 ... 548 WHO 0 0 None None None 0 2022062100 NaN 2 uuid:3a470336-2de5-46eb-9da5-3a03815f9fde Zeenia 19 y None Point [-117.1115681395832, 32.773376588223655, 68.08... 0.000 audit.csv uuid:d1c762c8-51ee-4966-a14b-5d50427c1534 ... 56 Yaw 1 1 None rejected collect:cAOhxkeJksuCQfjE 1 2022062100 NaN <p>3 rows \u00d7 23 columns</p> <p>You can build graphs from form data:</p> In\u00a0[5]: Copied! <pre>colors = {'g':'Green', 'o':'Orange', 'r':'Red', 'y':'Yellow'}\ndf['favorite_color_labels'] = df['favorite_color'].map(colors)\ndf['favorite_color_labels'].value_counts().plot(kind='bar', title='Count of favorite colors', xlabel=\"Color\", ylabel=\"Count\", rot=0)\n</pre> colors = {'g':'Green', 'o':'Orange', 'r':'Red', 'y':'Yellow'} df['favorite_color_labels'] = df['favorite_color'].map(colors) df['favorite_color_labels'].value_counts().plot(kind='bar', title='Count of favorite colors', xlabel=\"Color\", ylabel=\"Count\", rot=0) Out[5]: <pre>&lt;AxesSubplot:title={'center':'Count of favorite colors'}, xlabel='Color', ylabel='Count'&gt;</pre> <p>You can also analyze form metadata such as review state:</p> In\u00a0[6]: Copied! <pre>df['__system/reviewState'].value_counts().plot(kind='pie', title='Submission review state', ylabel='', rot=0)\n</pre> df['__system/reviewState'].value_counts().plot(kind='pie', title='Submission review state', ylabel='', rot=0) Out[6]: <pre>&lt;AxesSubplot:title={'center':'Submission review state'}&gt;</pre> <p>With <code>geopandas</code>, you can quickly plot points or create choropleth maps:</p> In\u00a0[7]: Copied! <pre>import geopandas\nfrom geopandas import GeoDataFrame\n\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\nbase = world.plot(color='lightgrey', figsize=(15, 10))\nbase.set_axis_off()\n\nlocations = pd.DataFrame(df['location/coordinates'].dropna().to_list(), columns=['x', 'y', 'alt'])\ngeodf = GeoDataFrame(locations, geometry=geopandas.points_from_xy(locations['x'], locations['y']))\ngeodf.plot(ax=base, marker='o', color='blue', markersize=15)\n</pre> import geopandas from geopandas import GeoDataFrame  world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres')) base = world.plot(color='lightgrey', figsize=(15, 10)) base.set_axis_off()  locations = pd.DataFrame(df['location/coordinates'].dropna().to_list(), columns=['x', 'y', 'alt']) geodf = GeoDataFrame(locations, geometry=geopandas.points_from_xy(locations['x'], locations['y'])) geodf.plot(ax=base, marker='o', color='blue', markersize=15) Out[7]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/basic-analysis-pandas/#Using-pyodk-and-pandas-for-basic-analysis","title":"Using <code>pyodk</code> and <code>pandas</code> for basic analysis\u00b6","text":"<p><code>pyodk</code> simplifies connecting to ODK Central using Python. \ud83d\udc0d</p> <p>If your preferred data science language is R, check out <code>ruODK</code> and <code>repvisforODK</code>.</p> <p>To get started with <code>pyodk</code>, you'll need to configure a Central server you'd like to connect to. Create a <code>.pyodk_config.toml</code> file in your home directory. Copy the following configuration and replace the placeholders:</p> <pre><code>[central]\nbase_url = \"https://www.example.com\"\nusername = \"my_user\"\npassword = \"my_password\"\ndefault_project_id = 123\n</code></pre> <p><code>pyodk</code> will use these credentials and defaults so that they never have to appear in your Python code.</p> <p>To use these examples as-is, you will need to put this form definition on your server and make a few submissions.</p> <p>You will need to create a <code>Client</code> to establish a connection to your configured Central server so let's import the class. We'll also be using the <code>pandas</code> library.</p>"},{"location":"examples/basic-analysis-pandas/#Downloading-and-analyzing-data","title":"Downloading and analyzing data\u00b6","text":"<p>You can download a data table and use tools like <code>pandas</code> and <code>geopandas</code> to explore and analyze it.</p>"},{"location":"examples/beyond-library-methods/","title":"Going beyond pyodk's library methods","text":"In\u00a0[26]: Copied! <pre>from pyodk.client import Client\n\nclient = Client().open()\n</pre> from pyodk.client import Client  client = Client().open() In\u00a0[27]: Copied! <pre>client.projects.get()\n</pre> client.projects.get() Out[27]: <pre>Project(id=7, name='pyodk project', createdAt=datetime.datetime(2021, 2, 14, 23, 55, 48, 38000, tzinfo=datetime.timezone.utc), description=\"Examples for pyodk.\", archived=None, keyId=None, appUsers=None, forms=None, lastSubmission=None, updatedAt=datetime.datetime(2022, 9, 20, 19, 21, 15, 241000, tzinfo=datetime.timezone.utc), deletedAt=None)</pre> <p>This returns a <code>Project</code> object with typed fields. Notice, for example, that <code>updatedAt</code> is a <code>datetime</code>.</p> In\u00a0[28]: Copied! <pre>response = client.get(\"projects/7\")\nresponse.json()\n</pre> response = client.get(\"projects/7\") response.json() Out[28]: <pre>{'id': 7,\n 'name': 'pyodk project',\n 'description': \"Examples for pyodk.\",\n 'archived': None,\n 'keyId': None,\n 'createdAt': '2021-02-14T23:55:48.038Z',\n 'updatedAt': '2022-09-20T19:21:15.241Z',\n 'deletedAt': None}</pre> <p>The <code>get</code> request returned a Response object and we got the response's JSON.</p> In\u00a0[29]: Copied! <pre>response = client.get('/projects/7/forms/favorite_color/versions/2012060405.xlsx')\nresponse.content[:150]\n</pre> response = client.get('/projects/7/forms/favorite_color/versions/2012060405.xlsx') response.content[:150] Out[29]: <pre>b'PK\\x03\\x04\\x14\\x00\\x06\\x00\\x08\\x00\\x00\\x00!\\x00|l\\x98\\x16i\\x01\\x00\\x00\\xa0\\x05\\x00\\x00\\x13\\x00\\x08\\x02[Content_Types].xml \\xa2\\x04\\x02(\\xa0\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'</pre> <p>In this case the response is binary data and it's not very useful as text. You could, for example, open it with <code>openpyxl</code> to edit it or you could save it to a local file:</p> In\u00a0[25]: Copied! <pre>if response.status_code == 200:\n    with open('2012060405.xlsx', 'wb') as f:\n        f.write(response.content)\n</pre> if response.status_code == 200:     with open('2012060405.xlsx', 'wb') as f:         f.write(response.content) <p>The code above also shows checking the status code of the response before getting its contents.</p> In\u00a0[39]: Copied! <pre>r = client.post('/projects/7/app-users', json={'displayName': 'Lab Tech'})\nr.json()\n</pre> r = client.post('/projects/7/app-users', json={'displayName': 'Lab Tech'}) r.json() Out[39]: <pre>{'projectId': 7,\n 'id': 684,\n 'type': 'field_key',\n 'displayName': 'Lab Tech',\n 'createdAt': '2022-09-20T20:03:28.052Z',\n 'updatedAt': None,\n 'deletedAt': None,\n 'token': 'IwstfMMYfeGwdebPH643OTmmzrPuSbmxBh9$W6u!g3PrI7wGTLbMsWGfvDWUzdDn',\n 'csrf': '5NXWnOdUzA4JndSRiogXdfkiha0lOz8yDD4HQWgjplAciLYRnUccQfT$8oynK3cB',\n 'expiresAt': '9999-12-31T23:59:59.000Z'}</pre> <p>The <code>r</code> variable now holds a Response object representing the response to your request. If the request was successful, you can access the response json by calling <code>r.json()</code>. You can then do things like use the <code>id</code> or <code>token</code> in additional requests.</p>"},{"location":"examples/beyond-library-methods/#Going-beyond-pyodk's-library-methods","title":"Going beyond <code>pyodk</code>'s library methods\u00b6","text":"<p><code>pyodk</code> simplifies connecting to ODK Central using Python. \ud83d\udc0d</p>"},{"location":"examples/beyond-library-methods/#Getting-started","title":"Getting started\u00b6","text":"<p>To get started with <code>pyodk</code>, you'll need to configure a Central server you'd like to connect to. Create a <code>.pyodk_config.toml</code> file in your home directory. Copy the following configuration and replace the placeholders:</p> <pre><code>[central]\nbase_url = \"https://www.example.com\"\nusername = \"my_user\"\npassword = \"my_password\"\ndefault_project_id = 123\n</code></pre> <p><code>pyodk</code> will use these credentials and defaults so that they never have to appear in your Python code.</p> <p>You will then need to create a <code>Client</code> to establish a connection to your configured Central server:</p>"},{"location":"examples/beyond-library-methods/#Library-methods","title":"Library methods\u00b6","text":"<p><code>pyodk</code> provides carefully-designed methods organized according to the resources they relate to. For example, you can get information about the default project:</p>"},{"location":"examples/beyond-library-methods/#Raw-HTTP-requests","title":"Raw HTTP requests\u00b6","text":"<p><code>podk</code> also provides methods on <code>client</code> to perform raw requests using the <code>Requests</code> library. This is useful if you're already comfortable with the ODK Central API documentation or you need functionality that isn't provided natively by <code>pyodk</code>.</p> <p>For example, you can also get information about a project this way:</p>"},{"location":"examples/beyond-library-methods/#Using-the-API-docs","title":"Using the API docs\u00b6","text":"<p>To write your own raw HTTP request, start by finding the endpoint that you would like to make a request to in the documentation. For example, let's say you want to retrieve the XLSForm for a past form version. You can start by finding the API documentation here.</p> <p></p> <p>As shown by the arrow above, the <code>GET</code> method is specified so you will use the client\u2019s <code>.get</code> method. You can start by pasting the desired endpoint path as a parameter:</p> <pre><code>r = client.get('/projects/projectId/forms/xmlFormId/versions/version.xlsx')\n</code></pre> <p>The parts of the URL that are colored in the documentation are parameters that you need to set. For example, let\u2019s say you want to access version <code>2012060401</code> of a form with the form ID <code>favorite_color</code> in project <code>7</code> on your server, you would fill in the placeholders like this:</p>"},{"location":"examples/beyond-library-methods/#Requests-that-need-input","title":"Requests that need input\u00b6","text":"<p>If your request needs to specify some attributes, you can use request\u2019s json parameter.</p> <p>For example, let\u2019s say you want to create a new App User with name \u201cLab Tech\u201d. Start by reviewing the API docs. The <code>POST</code> method is specified so you will use your client\u2019s <code>.post()</code> method. As above, you can copy the path and fill in values for the parameters:</p> <pre><code>response = client.post('/projects/7/app-users')\n</code></pre> <p>You also need to specify a value for the <code>displayName</code> attribute in your request:</p>"},{"location":"examples/beyond-library-methods/#Help-us-add-the-library-methods-you-need!","title":"Help us add the library methods you need!\u00b6","text":"<p>Making raw HTTP requests can be a convenient way to quickly write up examples from the API documentation and to use uncommon endpoints. However, our goal with <code>pyodk</code> is to provide lots of useful functionality through carefully-designed library methods. If you find yourself reaching for raw HTTP methods a lot, please file an issue and let us know what functionality you'd like to see added to the library!</p>"},{"location":"examples/working-with-repeats/","title":"Working with repeats","text":"<p>ODK forms can include repeated sections. These are like subforms linked to a base form. The data for each repeat is represented in a separate table.</p> <p>When processing data, you can sometimes work with the base data and any repeat data entirely separately. For example, in your form design, you may have calculated a summary of the repeats in the base data or copied values you need for analysis into your repeats. Sometimes you do need to connect them and the examples below provide some ways to do so.</p> <p>The form used in the examples below is simple_repeat.xlsx.</p> In\u00a0[17]: Copied! <pre>from pyodk.client import Client\nimport pandas as pd\n\nclient = Client().open()\nsubmissions = client.submissions.get_table(form_id='simple_repeat', filter=\"__system/reviewState ne 'rejected'\")\n</pre> from pyodk.client import Client import pandas as pd  client = Client().open() submissions = client.submissions.get_table(form_id='simple_repeat', filter=\"__system/reviewState ne 'rejected'\") <p>We'd like to be able to use <code>pandas</code> for our analysis so we use <code>json_normalize</code> to go from JSON with nesting (ODK <code>groups</code>) to a pandas dataframe. We specify a separator of <code>/</code> to match other ODK exports (the default is to use <code>.</code> when separating groups )</p> In\u00a0[18]: Copied! <pre>subs_df = pd.json_normalize(data=submissions['value'], sep='/')\nsubs_df.head(3)\n</pre> subs_df = pd.json_normalize(data=submissions['value'], sep='/') subs_df.head(3) Out[18]: __id session_num today name observation@odata.navigationLink meta/instanceID __system/submissionDate __system/updatedAt __system/submitterId __system/submitterName __system/attachmentsPresent __system/attachmentsExpected __system/status __system/reviewState __system/deviceId __system/edits __system/formVersion 0 uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 24324 2022-10-10 Abosede Lynne Submissions('uuid%3A782628f5-dd98-4676-8c62-cd... uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 2022-10-10T20:43:53.754Z None 30 ln@nafundi.com 0 0 None None None 0 2022101001 1 uuid:013c334c-102a-4001-b637-569cf686ee7d 23455 2022-10-10 Kierra Reginald Submissions('uuid%3A013c334c-102a-4001-b637-56... uuid:013c334c-102a-4001-b637-569cf686ee7d 2022-10-10T20:27:21.232Z None 30 ln@nafundi.com 0 0 None None None 0 2022101001 2 uuid:dbbe542b-72fe-42c7-9a2f-834c942e8104 2343 2022-10-05 Kierra Reginald Submissions('uuid%3Adbbe542b-72fe-42c7-9a2f-83... uuid:dbbe542b-72fe-42c7-9a2f-834c942e8104 2022-10-10T20:27:10.082Z None 30 ln@nafundi.com 0 0 None None None 0 2022101001 <p>Next we'll want to do the same thing for the repeat data (<code>Submissions.observation</code>):</p> In\u00a0[19]: Copied! <pre>repeats = client.submissions.get_table(form_id='simple_repeat', table_name='Submissions.observation', filter=\"__system/reviewState ne 'rejected'\")\nobs_df = pd.json_normalize(data=repeats['value'], sep='/')\nobs_df.head(3)\n</pre> repeats = client.submissions.get_table(form_id='simple_repeat', table_name='Submissions.observation', filter=\"__system/reviewState ne 'rejected'\") obs_df = pd.json_normalize(data=repeats['value'], sep='/') obs_df.head(3) Out[19]: thing count notes __id __Submissions-id 0 Birds 7.0 Hard to see fd198d7d6624599019de907673ab74aab7073111 uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 1 Frogs 23.0 Loud 3d36dc1bdd1a8e616e275f3f7f40b18a474c5fa3 uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 2 Plants 2.0 Not many here bd8fea8681d96a0cf5b4ddb4113d10537196851f uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 In\u00a0[20]: Copied! <pre>subs_df.set_index('__id', inplace=True)\njoined_df = obs_df.join(subs_df, on=\"__Submissions-id\")\njoined_df.head(4)\n</pre> subs_df.set_index('__id', inplace=True) joined_df = obs_df.join(subs_df, on=\"__Submissions-id\") joined_df.head(4) Out[20]: thing count notes __id __Submissions-id session_num today name observation@odata.navigationLink meta/instanceID ... __system/updatedAt __system/submitterId __system/submitterName __system/attachmentsPresent __system/attachmentsExpected __system/status __system/reviewState __system/deviceId __system/edits __system/formVersion 0 Birds 7.0 Hard to see fd198d7d6624599019de907673ab74aab7073111 uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 24324 2022-10-10 Abosede Lynne Submissions('uuid%3A782628f5-dd98-4676-8c62-cd... uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 ... None 30 ln@nafundi.com 0.0 0.0 None None None 0.0 2022101001 1 Frogs 23.0 Loud 3d36dc1bdd1a8e616e275f3f7f40b18a474c5fa3 uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 24324 2022-10-10 Abosede Lynne Submissions('uuid%3A782628f5-dd98-4676-8c62-cd... uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 ... None 30 ln@nafundi.com 0.0 0.0 None None None 0.0 2022101001 2 Plants 2.0 Not many here bd8fea8681d96a0cf5b4ddb4113d10537196851f uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 24324 2022-10-10 Abosede Lynne Submissions('uuid%3A782628f5-dd98-4676-8c62-cd... uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 ... None 30 ln@nafundi.com 0.0 0.0 None None None 0.0 2022101001 3 Birds 34.0 None a4eabf3eb42c4e6685df5c451d986f9ae2a4fc90 uuid:013c334c-102a-4001-b637-569cf686ee7d 23455 2022-10-10 Kierra Reginald Submissions('uuid%3A013c334c-102a-4001-b637-56... uuid:013c334c-102a-4001-b637-569cf686ee7d ... None 30 ln@nafundi.com 0.0 0.0 None None None 0.0 2022101001 <p>4 rows \u00d7 21 columns</p> <p>Note that the first three <code>things</code> have the same <code>Submissions-id</code> while the last has a different one because it belongs to a different submission.</p> <p>You can then do things like group by values in the base data, the repeat data, or both. You can also use aggregating functions like sum.</p> <p>Using <code>groupby</code> and <code>stack</code> is similar to using pivot tables in spreadsheet software. Pandas also provides <code>pivot_table</code> which is similar to what is shown below (learn more).</p> In\u00a0[21]: Copied! <pre>grouped = joined_df.groupby(['name', 'thing']).sum('count')[['count']]\ngrouped\n</pre> grouped = joined_df.groupby(['name', 'thing']).sum('count')[['count']] grouped Out[21]: count name thing Abosede Lynne Birds 7.0 Frogs 23.0 Plants 15.0 Arnaude Antonius Birds 2.0 Frogs 45.0 Plants 12.0 Kierra Reginald Birds 84.0 Plants 55.0 In\u00a0[22]: Copied! <pre>ax = grouped.unstack(level=0).plot(kind='bar')\nax.set_xlabel(\"Sighting\")\nax.set_ylabel(\"Total count\")\nax.legend().set_title(\"Data collector\")\n</pre> ax = grouped.unstack(level=0).plot(kind='bar') ax.set_xlabel(\"Sighting\") ax.set_ylabel(\"Total count\") ax.legend().set_title(\"Data collector\") In\u00a0[23]: Copied! <pre>from flatten_json import flatten_json\n\nclient = Client().open()\n# The expand option includes all repeats in the json returned by get_table\nsubmissions = client.submissions.get_table(form_id='simple_repeat', expand='*', filter=\"__system/reviewState ne 'rejected'\")\n# Flatten all repeats for each submission returned\ndf = pd.DataFrame([flatten_json(x) for x in submissions['value']])\n\n# Drop system columns so we can see more of the repeats\ndf.drop(list(df.filter(regex = '__system')), axis = 1, inplace = True)\ndf.head(3)\n</pre> from flatten_json import flatten_json  client = Client().open() # The expand option includes all repeats in the json returned by get_table submissions = client.submissions.get_table(form_id='simple_repeat', expand='*', filter=\"__system/reviewState ne 'rejected'\") # Flatten all repeats for each submission returned df = pd.DataFrame([flatten_json(x) for x in submissions['value']])  # Drop system columns so we can see more of the repeats df.drop(list(df.filter(regex = '__system')), axis = 1, inplace = True) df.head(3) Out[23]: __id session_num today name meta_instanceID observation@odata.navigationLink observation_0_thing observation_0_count observation_0_notes observation_0___id observation_1_thing observation_1_count observation_1_notes observation_1___id observation_2_thing observation_2_count observation_2_notes observation_2___id 0 uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 24324 2022-10-10 Abosede Lynne uuid:782628f5-dd98-4676-8c62-cdb2476e40d3 Submissions('uuid%3A782628f5-dd98-4676-8c62-cd... Birds 7 Hard to see fd198d7d6624599019de907673ab74aab7073111 Frogs 23.0 Loud 3d36dc1bdd1a8e616e275f3f7f40b18a474c5fa3 Plants 2.0 Not many here bd8fea8681d96a0cf5b4ddb4113d10537196851f 1 uuid:013c334c-102a-4001-b637-569cf686ee7d 23455 2022-10-10 Kierra Reginald uuid:013c334c-102a-4001-b637-569cf686ee7d Submissions('uuid%3A013c334c-102a-4001-b637-56... Birds 34 None a4eabf3eb42c4e6685df5c451d986f9ae2a4fc90 NaN NaN NaN NaN NaN NaN NaN NaN 2 uuid:dbbe542b-72fe-42c7-9a2f-834c942e8104 2343 2022-10-05 Kierra Reginald uuid:dbbe542b-72fe-42c7-9a2f-834c942e8104 Submissions('uuid%3Adbbe542b-72fe-42c7-9a2f-83... Birds 35 None e411132a5040cbc72b0447c8feef2944904f768a NaN NaN NaN NaN NaN NaN NaN NaN"},{"location":"examples/working-with-repeats/#Get-base-data-and-the-repeat-data","title":"Get base data and the repeat data\u00b6","text":"<p>First get the base data using <code>client.submissions.get_table</code>. We can apply filters such as excluding rejected submissions and get back JSON.</p>"},{"location":"examples/working-with-repeats/#Augment-the-repeats-with-the-base-data","title":"Augment the repeats with the base data\u00b6","text":"<p>For many analysis needs, it's helpful to augment the repeat data with the base data. To join dataframes in pandas, they must have columns with the same key. For ODK data, we can use <code>__id</code> from the base and <code>__Submissions-id</code> from the repeat.</p> <p>First we set <code>__id</code> to be the index of the base submission dataframe, then we build a new dataframe joining the two:</p>"},{"location":"examples/working-with-repeats/#Augment-the-base-data-with-%22wide%22-repeats","title":"Augment the base data with \"wide\" repeats\u00b6","text":"<p>Sometimes it can be helpful to work with the repeats on the same row as the submission. This is particularly useful when:</p> <ul> <li>The number of repeats is fixed and each repeat instance has a different meaning. For example, the first instance might be about mangos, the second about cassava and the third about bananas. Those will be analyzed separately.</li> <li>Responses in repeats are primarily qualitative and need to be read but not quantitatively analyzed.</li> </ul>"},{"location":"examples/app_user_provisioner/app_user_provisioner/","title":"App user provisioner","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nApp User Provisioner\n\nPut a series of user names (one on each line) in a file named `users.csv` in the same\ndirectory as this script. The script will create App Users for each user, using the\nproject, forms, and other configurations set below. The outputs are one PNG for each\nprovisioned App User, and a `users.pdf` file with all the App User PNGs in the folder.\n\nInstall requirements for this script in `requirements.txt`. The specified versions are\nthose that were current when the script was last updated, though it should work with\nmore recent versions. Install these with `pip install -r requirements.txt`.\n\nTo run the script, use `python app_user_provisioner.py`.\n\"\"\"\nimport base64\nimport glob\nimport json\nimport zlib\nfrom typing import Any, Dict\n</pre> \"\"\" App User Provisioner  Put a series of user names (one on each line) in a file named `users.csv` in the same directory as this script. The script will create App Users for each user, using the project, forms, and other configurations set below. The outputs are one PNG for each provisioned App User, and a `users.pdf` file with all the App User PNGs in the folder.  Install requirements for this script in `requirements.txt`. The specified versions are those that were current when the script was last updated, though it should work with more recent versions. Install these with `pip install -r requirements.txt`.  To run the script, use `python app_user_provisioner.py`. \"\"\" import base64 import glob import json import zlib from typing import Any, Dict In\u00a0[\u00a0]: Copied! <pre>import segno\nfrom PIL import Image, ImageDraw, ImageFont, ImageOps\n</pre> import segno from PIL import Image, ImageDraw, ImageFont, ImageOps In\u00a0[\u00a0]: Copied! <pre>from pyodk.client import Client\n</pre> from pyodk.client import Client In\u00a0[\u00a0]: Copied! <pre># Customise these settings to your environment.\nPROJECT_ID = 149\nPROJECT_NAME = \"My Cool Project\"\nFORMS_TO_ACCESS = [\"all-widgets\", \"afp-knowledge\"]\nADMIN_PASSWORD = \"s00p3rs3cr3t\"\n</pre> # Customise these settings to your environment. PROJECT_ID = 149 PROJECT_NAME = \"My Cool Project\" FORMS_TO_ACCESS = [\"all-widgets\", \"afp-knowledge\"] ADMIN_PASSWORD = \"s00p3rs3cr3t\" In\u00a0[\u00a0]: Copied! <pre>def get_settings(server_url: str, project_name: str, username: str) -&gt; Dict[str, Any]:\n\"\"\"Template for the settings to encode in the QR image. Customise as needed.\"\"\"\n    return {\n        \"general\": {\n            \"form_update_mode\": \"match_exactly\",\n            \"autosend\": \"wifi_and_cellular\",\n            \"delete_send\": True,\n            \"server_url\": server_url,\n            \"username\": username,\n        },\n        \"admin\": {\n            \"admin_pw\": ADMIN_PASSWORD,\n            \"change_server\": False,\n            \"automatic_update\": False,\n            \"change_autosend\": False,\n        },\n        \"project\": {\"name\": project_name, \"color\": \"#ffeb3b\", \"icon\": \"\ud83d\udca5\"},\n    }\n</pre> def get_settings(server_url: str, project_name: str, username: str) -&gt; Dict[str, Any]:     \"\"\"Template for the settings to encode in the QR image. Customise as needed.\"\"\"     return {         \"general\": {             \"form_update_mode\": \"match_exactly\",             \"autosend\": \"wifi_and_cellular\",             \"delete_send\": True,             \"server_url\": server_url,             \"username\": username,         },         \"admin\": {             \"admin_pw\": ADMIN_PASSWORD,             \"change_server\": False,             \"automatic_update\": False,             \"change_autosend\": False,         },         \"project\": {\"name\": project_name, \"color\": \"#ffeb3b\", \"icon\": \"\ud83d\udca5\"},     } In\u00a0[\u00a0]: Copied! <pre># Check that the Roboto font used for the QR images is available (e.g. on Linux / Win).\ntry:\n    ImageFont.truetype(\"Roboto-Regular.ttf\", 24)\nexcept OSError:\n    print(\n        \"Font file 'Roboto-Regular.ttf' not found. This can be downloaded \"\n        \"from Google, or copied from the Examples directory. \"\n        \"Source: https://fonts.google.com/specimen/Roboto/about\"\n    )\n</pre> # Check that the Roboto font used for the QR images is available (e.g. on Linux / Win). try:     ImageFont.truetype(\"Roboto-Regular.ttf\", 24) except OSError:     print(         \"Font file 'Roboto-Regular.ttf' not found. This can be downloaded \"         \"from Google, or copied from the Examples directory. \"         \"Source: https://fonts.google.com/specimen/Roboto/about\"     ) In\u00a0[\u00a0]: Copied! <pre># Provision the App Users.\nwith open(\"users.csv\", newline=\"\") as f:\n    desired_users = f.readlines()\n    desired_users = [user.rstrip() for user in desired_users]\n</pre> # Provision the App Users. with open(\"users.csv\", newline=\"\") as f:     desired_users = f.readlines()     desired_users = [user.rstrip() for user in desired_users] In\u00a0[\u00a0]: Copied! <pre>client = Client()\nprovisioned_users = client.projects.create_app_users(\n    display_names=desired_users, forms=FORMS_TO_ACCESS, project_id=PROJECT_ID\n)\n</pre> client = Client() provisioned_users = client.projects.create_app_users(     display_names=desired_users, forms=FORMS_TO_ACCESS, project_id=PROJECT_ID ) In\u00a0[\u00a0]: Copied! <pre># Generate the QR codes.\nfor user in provisioned_users:\n    collect_settings = get_settings(\n        server_url=f\"{client.session.base_url}key/{user.token}/projects/{PROJECT_ID}\",\n        project_name=f\"{PROJECT_NAME}: {user.displayName}\",\n        username=user.displayName,\n    )\n    qr_data = base64.b64encode(\n        zlib.compress(json.dumps(collect_settings).encode(\"utf-8\"))\n    )\n\n    code = segno.make(qr_data, micro=False)\n    code.save(\"settings.png\", scale=4)\n\n    png = Image.open(\"settings.png\")\n    png = png.convert(\"RGB\")\n    text_anchor = png.height\n    png = ImageOps.expand(png, border=(0, 0, 0, 30), fill=(255, 255, 255))\n    draw = ImageDraw.Draw(png)\n    font = ImageFont.truetype(\"Roboto-Regular.ttf\", 24)\n    draw.text((20, text_anchor - 10), user.displayName, font=font, fill=(0, 0, 0))\n    png.save(f\"settings-{user.displayName}.png\", format=\"PNG\")\n</pre> # Generate the QR codes. for user in provisioned_users:     collect_settings = get_settings(         server_url=f\"{client.session.base_url}key/{user.token}/projects/{PROJECT_ID}\",         project_name=f\"{PROJECT_NAME}: {user.displayName}\",         username=user.displayName,     )     qr_data = base64.b64encode(         zlib.compress(json.dumps(collect_settings).encode(\"utf-8\"))     )      code = segno.make(qr_data, micro=False)     code.save(\"settings.png\", scale=4)      png = Image.open(\"settings.png\")     png = png.convert(\"RGB\")     text_anchor = png.height     png = ImageOps.expand(png, border=(0, 0, 0, 30), fill=(255, 255, 255))     draw = ImageDraw.Draw(png)     font = ImageFont.truetype(\"Roboto-Regular.ttf\", 24)     draw.text((20, text_anchor - 10), user.displayName, font=font, fill=(0, 0, 0))     png.save(f\"settings-{user.displayName}.png\", format=\"PNG\") In\u00a0[\u00a0]: Copied! <pre># Concatenate the user images into a PDF.\nimages = [Image.open(f) for f in sorted(glob.glob(\"./settings-*.png\"))]\nif 0 &lt; len(images):\n    img = iter(images)\n    next(img).save(\n        \"users.pdf\", format=\"PDF\", resolution=100, save_all=True, append_images=img\n    )\n</pre> # Concatenate the user images into a PDF. images = [Image.open(f) for f in sorted(glob.glob(\"./settings-*.png\"))] if 0 &lt; len(images):     img = iter(images)     next(img).save(         \"users.pdf\", format=\"PDF\", resolution=100, save_all=True, append_images=img     )"}]}